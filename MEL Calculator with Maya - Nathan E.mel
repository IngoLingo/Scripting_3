//Check if nje_Calculator exists then delete it
if (`window -ex "nje_Calculator"`)
     {
     deleteUI nje_Calculator;
     windowPref -remove nje_Calculator;
     }   
     
//Set Up Variables
string $termLabel;
global float $numberOfTerms;
float $termsWindowHeight;

global string $stringTerm[];
global float $floatTerm[];

global string $stringPower[];
global int $intPower[];

global float $numberTest;
$numberTest = 0;

//Assign Variables
$numberOfTerms = 10; //  CHANGE NUMBER OF TERMS HERE  //

$termsWindowHeight = 20*$numberOfTerms + 40;


//Build the window
window -widthHeight 100 100  -menuBar true -resizeToFitChildren true nje_Calculator;

    //Frame layout
	columnLayout;
	        //Create a frame layout for showing current equasion (may remove)
	        /*frameLayout -label "CURRENT EQUASION";
				rowColumnLayout -width 400 -height 50 -numberOfColumns 1;
					text -label $numberTest;

				setParent ..;
			setParent ..;*/
			
			//Create a frame layout for terms
			frameLayout -collapsable true -label "INPUT NEW TERM";
                
                //Create layout inside INPUT NEW TERM frame
				rowColumnLayout -width 400 -height $termsWindowHeight -numberOfColumns 2 -columnAttach 1 "right" 0
                    -columnWidth 1 100 -columnWidth 2 200;
                    
                    //Empty Space
                    text -label  " "; text -label  " ";
                        
                    //Inside the window
            		for( $i=0; $i<$numberOfTerms; $i++ )
            		{
                        $termLabel = "Term " + string($i+1) + ":  ";
                        text -label  $termLabel;
                        
                        //$stringTerm[$i] = `floatField -value ($i+1)`; //Test
                        $stringTerm[$i] = `floatField -value 0`;
                        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
            		}
            		
                    
                    //Empty Space
                    text -label  " ";
                    
				setParent ..;
			setParent ..;
			
			//Create a frame layout for terms
			frameLayout -collapse true -collapsable true -label "TO THE POWER OF";

				//Create layout inside TO THE POWER OF frame
				rowColumnLayout -width 400 -height $termsWindowHeight -numberOfColumns 2 -columnAttach 1 "right" 0
                    -columnWidth 1 150 -columnWidth 2 150;
                    
                    //Empty Space
                    text -label  " "; text -label  " ";

                    //Inside the window
            		for( $i=0; $i<$numberOfTerms; $i++ )
            		{
                        $termLabel = "Tearm " + string($i+1) + ", to the power of :  ";
                        text -label  $termLabel;
                        
                        $stringPower[$i] = `intField -value 1`;
                        $intPower[$i] = `intField -q -value $stringPower[$i]`;
            		}
                    
                    
                    //Empty Space
                    text -label  " ";
                    
				setParent ..;
			setParent ..;

			//Create a collapsible frame for selecting an operator and average
			frameLayout -collapsable true -label "SELECT AN OPERATOR OR AVERAGE";

				//Create layout for Operators Title
				rowColumnLayout -width 400 -height 30; 
				    
					text -label " ";
					text -label "Operator";

				setParent ..;
				
				//Create layout for Operators
				rowColumnLayout -width 400 -height 20 -columnSpacing 1 50
				    -numberOfColumns 4 -columnWidth 1 50 -columnWidth 2 50 -columnWidth 3 50 -columnWidth 4 50
				    -columnSpacing 2 5 -columnSpacing 3 5 -columnSpacing 4 5;
				    
					//Create operator buttons
					button -label "+" -command "Add();"  -actOnPress false; 
					button -label "-" -command "Subtract();"  -actOnPress false; 
					button -label "*" -command "Multiply();"  -actOnPress false; 
					button -label "/" -command "Divide();"  -actOnPress false;

				setParent ..;
				
    			//Create layout for Averages Title
				rowColumnLayout -width 400 -height 30; 

					text -label " ";
					text -label "Average";

				setParent ..;
				
				//Create layout for Averages
				rowColumnLayout -width 400 -height 60 -columnSpacing 1 50
				    -numberOfColumns 4 -columnWidth 1 50 -columnWidth 2 50 -columnWidth 3 50 -columnWidth 4 50
				    -columnSpacing 2 5 -columnSpacing 3 5 -columnSpacing 4 5;
                    
					//Create avrage buttons					
					button -label "mean" -command "Mean();"  -actOnPress false; 
					button -label "median" -command "Median();"  -actOnPress false; 
					button -label "mode" -command "Mode();"  -actOnPress false; 
					button -label "range" -command "Range();"  -actOnPress false;

				setParent ..;
			setParent ..;

			//Create a collapsible frame layout for End frame
			/*
			frameLayout -collapse true -collapsable true -label "FIND END RESULT";

				//Create layout for End buttons
				rowColumnLayout -width 400 -height 100 -numberOfColumns 2 -columnAttach 1 "right" 0
                    -columnWidth 1 100 -columnWidth 2 200
                    -columnSpacing 2 40;
                    
                    //Empty Space
                    text -label  " "; text -label  " ";

					//Create buttons
					button -label " Restart " -command "restart"  -actOnPress false;
					button -label "Print Results" -command "printResults"  -actOnPress false;
					
                    //Empty Space
                    text -label  " ";

				setParent ..;
			setParent ..;
			*/

//Run the window
showWindow nje_Calculator;


//Processes/Functions
// test functions
proc func() {
    global float $numberTest;
    $numberTest += 1;
    showWindow nje_Calculator;
	print("Test Print: " + $numberTest + "\n");
}

proc restart() {
     print("restart window here\n");
}

// power function
proc float Power(float $t, int $p)
{
    float $final = 1;
    
    if ($p > 0)
    {
        for( $i=0; $i<$p; $i++ )
    	{
    	    $final *= $t;
    	}
    }
    else if ($p < 0)
    {
        for( $i=0; $i>$p; $i-- )
    	{
    	    $final /= $t;
    	}
    }
    else
    {
        $final = 1;
    }
	
	return ($final);
}

// operator functions
proc Add()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    $floatTerm[0] = `floatField -q -value $stringTerm[0]`;
    $intPower[0] = `intField -q -value $stringPower[0]`;
    
    float $sum = Power($floatTerm[0], $intPower[0]);
    
	print("\n");
	
    if ($intPower[0] == 1)
    {
        print( $floatTerm[0] + " " );
    }
    else
    {
        print( $floatTerm[0] + "^" + $intPower[0] + " " );
    }
    
	for( $i=1; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
    
        $sum += Power($floatTerm[$i], $intPower[$i]);
        
        if ($intPower[$i] == 1)
        {
            print("+ " + $floatTerm[$i] + " ");
        }
        else
        {
            print( "+ " + $floatTerm[$i] + "^" + $intPower[$i] + " " );
        }
        
    }
    
	print("= "+ $sum +"\n");
}

proc Subtract()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    $floatTerm[0] = `floatField -q -value $stringTerm[0]`;
    $intPower[0] = `intField -q -value $stringPower[0]`;
    
    float $sum = Power($floatTerm[0], $intPower[0]);
    
	print("\n");
	
    if ($intPower[0] == 1)
    {
        print( $floatTerm[0] + " " );
    }
    else
    {
        print( $floatTerm[0] + "^" + $intPower[0] + " " );
    }
    
	for( $i=1; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
    
        $sum -= Power($floatTerm[$i], $intPower[$i]);
        
        if ($intPower[$i] == 1)
        {
            print("- " + $floatTerm[$i] + " ");
        }
        else
        {
            print( "- " + $floatTerm[$i] + "^" + $intPower[$i] + " " );
        }
        
    }
    
	print("= "+ $sum +"\n");
}
proc Multiply()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    $floatTerm[0] = `floatField -q -value $stringTerm[0]`;
    $intPower[0] = `intField -q -value $stringPower[0]`;
    
    float $sum = Power($floatTerm[0], $intPower[0]);
	
	print("\n");
	
    if ($intPower[0] == 1)
    {
        print( $floatTerm[0] + " " );
    }
    else
    {
        print( $floatTerm[0] + "^" + $intPower[0] + " " );
    }
    
	for( $i=1; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
    
        $sum *= Power($floatTerm[$i], $intPower[$i]);
        
        if ($intPower[$i] == 1)
        {
            print("* " + $floatTerm[$i] + " ");
        }
        else
        {
            print( "* " + $floatTerm[$i] + "^" + $intPower[$i] + " " );
        }
        
    }
    
	print("= "+ $sum +"\n");
}

proc Divide()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    $floatTerm[0] = `floatField -q -value $stringTerm[0]`;
    $intPower[0] = `intField -q -value $stringPower[0]`;
    
    float $sum = Power($floatTerm[0], $intPower[0]);
    
	print("\n");
	
    if ($intPower[0] == 1)
    {
        print( $floatTerm[0] + " " );
    }
    else
    {
        print( $floatTerm[0] + "^" + $intPower[0] + " " );
    }
    
	for( $i=1; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
    
        $sum /= Power($floatTerm[$i], $intPower[$i]);
        
        if ($intPower[$i] == 1)
        {
            print("/ " + $floatTerm[$i] + " ");
        }
        else
        {
            print( "/ " + $floatTerm[$i] + "^" + $intPower[$i] + " " );
        }
        
    }
    
	print("= "+ $sum +"\n");
}

// averages functions
proc Mean()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    float $listOfFloats[];
    global string $stringPower[];
    global int $intPower[];
    
    $floatTerm[0] = `floatField -q -value $stringTerm[0]`;
    $intPower[0] = `intField -q -value $stringPower[0]`;
    
    float $sum = Power($floatTerm[0], $intPower[0]);
    
    //Prints the list of numbers in order
    print("\nFor these numbers:\n");
    for( $i=0; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
        
	    $listOfFloats[$i] = Power($floatTerm[$i], $intPower[$i]);
	    //print($listOfFloats[$i] + ", ");
	}
    
    $listOfFloats = `sort $listOfFloats`;

    for( $i=0; $i<$numberOfTerms; ++$i )
	{
	    print($listOfFloats[$i] + ", ");
	}
	
    print("\nThe Mean is:\n");
    /*if ($intPower[0] == 1)
    {
        print( "( " + $floatTerm[0] + " " );
    }
    else
    {
        print( $floatTerm[0] + "^" + $intPower[0] + " " );
    }*/
    
	for( $i=1; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
    
        $sum += Power($floatTerm[$i], $intPower[$i]);
        
        /*if ($intPower[$i] == 1)
        {
            print("+ " + $floatTerm[$i] + " ");
        }
        else
        {
            print( "+ " + $floatTerm[$i] + "^" + $intPower[$i] + " " );
        }*/
        
    }
    
    $sum /= $numberOfTerms;
    
	//print(") / " + $numberOfTerms + " = " + $sum +"\n");
	print($sum +"\n");
}

proc Median()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    float $listOfFloats[];
    int $medianNumber;
    float $sum;
    
    print("\nFor these numbers:\n");
    for( $i=0; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
        
	    $listOfFloats[$i] = Power($floatTerm[$i], $intPower[$i]);
	    //print($listOfFloats[$i] + ", ");
	}
    
    $listOfFloats = `sort $listOfFloats`;

    for( $i=0; $i<$numberOfTerms; ++$i )
	{
	    print($listOfFloats[$i] + ", ");
	}
	
	if ($numberOfTerms%2 == 0) //check if even
	{
	    $medianNumber = ceil(($numberOfTerms)/2);
        $sum = ( $listOfFloats[$medianNumber-1]+$listOfFloats[$medianNumber] )/2;
	}
	else //if odd
	{
	    $medianNumber = ceil(($numberOfTerms)/2);
        $sum = $listOfFloats[$medianNumber-1];
	}
    
    print("\nThe Median is:\n" + $sum + "\n" );
}

proc Mode()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    float $listOfFloats[]; //this  is the final value after addind the power
    int $maxNumber;
    float $sum;
    
    float $uniqeTerm[]; //storing uniqe terms
    int $uniqeTermFrequency[]; //storing how many times the uniqe term occours
    int $maxIndex = 0; //stores the index of the max number;
    int $maxIndexDup = 0;
    
    //Prints the list of numbers in order
    print("\nFor these numbers:\n");
    for( $i=0; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
        
	    $listOfFloats[$i] = Power($floatTerm[$i], $intPower[$i]);
	    //print($listOfFloats[$i] + ", ");
	}
    
    $listOfFloats = `sort $listOfFloats`;

    for( $i=0; $i<$numberOfTerms; ++$i )
	{
	    print($listOfFloats[$i] + ", ");
	}
	
	//Finds and counts uniqe terms
    for( $i=0; $i<$numberOfTerms; ++$i )
	{
	   if ( !floatArrayContains($listOfFloats[$i], $uniqeTerm) )
	   {
	       $uniqeTerm[size($uniqeTerm)] = $listOfFloats[$i];
	       $uniqeTermFrequency[size($uniqeTerm)] = 1;
	   }
	   else
	   {
	       int $index;
	       $index = floatArrayFind( $listOfFloats[$i], 0, $uniqeTerm );
	       $uniqeTermFrequency[$index] += 1;
	   }
	}
	$uniqeTermFrequency[0] += 1; //fix a weird bug where the first unit in the 0 index is not counted
	
	//Display uniqe terms and frequency and finds number that occours the most
    for( $i=0; $i<size($uniqeTerm); ++$i )
	{
	    //print("\nThe number " + $uniqeTerm[$i] + " occurs " + $uniqeTermFrequency[$i] + " times");

	    if ( $uniqeTermFrequency[$i] >= $uniqeTermFrequency[$maxIndex] )
	    {
    	    if ( $uniqeTermFrequency[$i] > $uniqeTermFrequency[$maxIndex] )
    	    {
    	        $maxIndexDup = 1;
    	        $maxIndex = $i;
    	    }
    	    else if ( $uniqeTermFrequency[$i] == $uniqeTermFrequency[$maxIndex] )
    	    {
    	        $maxIndexDup += 1;
    	    }
	    }
	    
	}
	
    //Find the number that occurs the most and print it
    if ($maxIndexDup == 1)
    {
        print("\nThe MODE is " + $uniqeTerm[$maxIndex] + " and it occurs " + $uniqeTermFrequency[$maxIndex] + " times.\n" );
    }
    else
    {
        print("\nThere are " + $maxIndexDup + " MODES.\n" );
    }
     
}

proc Range()
{
    global float $numberOfTerms;
    
    global string $stringTerm[];
    global float $floatTerm[];
    
    global string $stringPower[];
    global int $intPower[];
    
    float $listOfFloats[];
    int $maxNumber;
    float $sum;
    
    print("\nFor these numbers:\n");
    for( $i=0; $i<$numberOfTerms; ++$i )
	{
        $floatTerm[$i] = `floatField -q -value $stringTerm[$i]`;
        $intPower[$i] = `intField -q -value $stringPower[$i]`;
        
	    $listOfFloats[$i] = Power($floatTerm[$i], $intPower[$i]);
	    //print($listOfFloats[$i] + ", ");
	}
    
    $listOfFloats = `sort $listOfFloats`;

    for( $i=0; $i<$numberOfTerms; ++$i )
	{
	    print($listOfFloats[$i] + ", ");
	}
	
    $maxNumber = $numberOfTerms-1;
    $sum = ( $listOfFloats[$maxNumber]-$listOfFloats[0] );
	
    
    print("\nThe Range is:\n" + $sum + "\n" );
}

// final print results function
/*proc printResults() {
    Add();
}*/